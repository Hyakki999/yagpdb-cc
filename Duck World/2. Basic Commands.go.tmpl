{{/*
    Basic commands [Pick, Currency [$], Timely, Give]
    
	Recommended:
	- Trigger Type: Regex
	- Trigger: `\A\-(?i)(timely\z|\$\z|pick|give)`

    Copyright: 2021 Hyakki999
    License: MIT
    Repository: https://github.com/Hyakki999/YAGPDB-cc
*/}}


{{/* CONFIGURATION VARIABLES */}}
{{ $dbName := "CREDITS" }} {{/* Name of the Key of your DB that stores users currency amount */}}

{{/* Do not change anything below */}}
{{ $red := 0xff2627 }}
{{ $gre := 0x76ff03 }}

{{ if eq (lower (index .Args 0) ) "-timely" }}
	{{ if (dbGet .User.ID "timely") }}
	{{ $left := humanizeDurationSeconds ((dbGet .User.ID "timely").ExpiresAt.Sub currentTime)}}
	{{
		sendMessage nil (cembed
		"color" $red
		"title" (print "‚ö†Ô∏è" .User.String "\nYou can claim your daily again in\n" $left )
	) }}
	{{ else }}
	{{ $t := dbIncr .User.ID $dbName 30 }}
	{{
		sendMessage nil (cembed
		"color" $gre
		"title" (print .User.String "\nyou have claimed your daily 30ü¶Ü.")
	) }}
	{{ dbSetExpire .User.ID "timely" "d" 86400 }}
	{{end}}
	
{{else if eq (index .Args 0) "-$"}}
	{{
		sendMessage nil (cembed
		"color" $gre
		"title" (print .User.String " has " (dbGet .User.ID $dbName).Value "ü¶Ü")
	) }}

{{ else if eq (lower (index .Args 0) ) "-pick" }}
	{{ if (dbGet 0 "quack") }}
	{{ $list := cslice "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "1" "2" "3" "4" "5" "6" "7" "8" "9" "0" }}
	{{ $d := "" }}
	{{ range seq 0 20 }}
	{{$d = print $d (index $list (randInt (len $list)))}}
	{{ end }}

	{{ $g := sdict ((dbGet 0 "quack").Value) }}
	{{ if eq (len .CmdArgs) 1 }}
	{{ if eq (upper (index .CmdArgs 0)) ($g.Get "1") }}
		{{ $duck := randInt 1 8 }}
		{{
			editMessage ($g.Get "3") ($g.Get "2") (cembed
			"color" $gre
			"title" (print .User.String " has picked " $duck "ü¶Ü")
		) }}
		{{ $silent := dbIncr .User.ID $dbName $duck }}
		{{ dbSetExpire 0 "quack" (sdict "1" $d) 120}}
		{{ deleteMessage ($g.Get "3") ($g.Get "2") 60 }}
	{{ end }}
	{{ end }}
	{{ end }}
	{{ deleteTrigger 0 }}
	
{{ else if eq (lower (index .Args 0) ) "-give" }}
	{{ if eq (len .CmdArgs) 2 }}
	{{ $sender := .User.ID }}
	{{ $receiver := (toInt (index .CmdArgs 0)) }}
	{{ if not $receiver }}
	{{ $receiver = (index .Message.Mentions 0 ).ID }}
	{{end}}
	{{ $gift := toInt ( index .CmdArgs 1 ) }}
	{{ $sbal := toInt ( (dbGet .User.ID $dbName ).Value) }}

	{{ if ne $sender $receiver }}
		{{ if ge $gift 1 }}
			{{ if ge $sbal $gift }}
			{{ $silent1 := dbIncr $sender $dbName (mult -1 $gift) }}
			{{ $silent2 := dbIncr $receiver $dbName $gift }}
			{{ sendMessage nil (cembed "color" $gre "title" (print .User.String " gifted " $gift "ü¶Ü to " (userArg $receiver).String )) }}
			{{ else }}
			{{ sendMessage nil ( cembed "color" $red "title" ( print .User.String " insufficient ü¶Ü") ) }}
			{{ end }}
		{{ else }}
		{{ sendMessage nil ( cembed "color" $red "title" ( print .User.String " Damn. That's a bad move") ) }}
		{{ end }}
	{{ else }}
	{{ sendMessage nil ( cembed "color" $red "title" ( print .User.String " You get 68ü¶Ü") ) }}
	{{ end }}

	{{ else }}
	{{ sendMessage nil ( cembed "color" $red "title" ( print "Usage: -give <user> <amount>" ) ) }}
	{{ end }}
{{ end }}
